
UART_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002084  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08002190  08002190  00012190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002248  08002248  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002248  08002248  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002248  08002248  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002248  08002248  00012248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800224c  0800224c  0001224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000070  080022c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080022c0  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e4a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000151c  00000000  00000000  00026ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c0  00000000  00000000  00028400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  00028ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017958  00000000  00000000  000290f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005bd6  00000000  00000000  00040a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083309  00000000  00000000  00046626  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c992f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f6c  00000000  00000000  000c99ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002178 	.word	0x08002178

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002178 	.word	0x08002178

0800014c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param	None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	; (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	; (8000184 <__io_putchar+0x38>)
 8000164:	f001 fa05 	bl	8001572 <HAL_UART_Transmit>
	HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	; (8000184 <__io_putchar+0x38>)
 8000172:	f001 f9fe 	bl	8001572 <HAL_UART_Transmit>

	return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08002190 	.word	0x08002190
 8000184:	20000098 	.word	0x20000098

08000188 <main>:
/* USER CODE END 0 */


int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 fa62 	bl	8000654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f818 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f882 	bl	800029c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000198:	f000 f856 	bl	8000248 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello World!\n");
 800019c:	4807      	ldr	r0, [pc, #28]	; (80001bc <main+0x34>)
 800019e:	f001 fbe1 	bl	8001964 <puts>
	  HAL_Delay (1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f000 fab7 	bl	8000718 <HAL_Delay>
	  printf("I LOVE Embedded!\n");
 80001aa:	4805      	ldr	r0, [pc, #20]	; (80001c0 <main+0x38>)
 80001ac:	f001 fbda 	bl	8001964 <puts>
	  HAL_Delay (1000);
 80001b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b4:	f000 fab0 	bl	8000718 <HAL_Delay>
	  printf("Hello World!\n");
 80001b8:	e7f0      	b.n	800019c <main+0x14>
 80001ba:	bf00      	nop
 80001bc:	08002194 	.word	0x08002194
 80001c0:	080021a4 	.word	0x080021a4

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	; 0x40
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fb62 	bl	800189c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2310      	movs	r3, #16
 80001f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f2:	2302      	movs	r3, #2
 80001f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001f6:	2300      	movs	r3, #0
 80001f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001fa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000200:	f107 0318 	add.w	r3, r7, #24
 8000204:	4618      	mov	r0, r3
 8000206:	f000 fd4b 	bl	8000ca0 <HAL_RCC_OscConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000210:	f000 f8b2 	bl	8000378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000214:	230f      	movs	r3, #15
 8000216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000218:	2302      	movs	r3, #2
 800021a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2102      	movs	r1, #2
 800022e:	4618      	mov	r0, r3
 8000230:	f000 ffb6 	bl	80011a0 <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800023a:	f000 f89d 	bl	8000378 <Error_Handler>
  }
}
 800023e:	bf00      	nop
 8000240:	3740      	adds	r7, #64	; 0x40
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 800024e:	4a12      	ldr	r2, [pc, #72]	; (8000298 <MX_USART2_UART_Init+0x50>)
 8000250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 8000254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 8000262:	2200      	movs	r2, #0
 8000264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 8000268:	2200      	movs	r2, #0
 800026a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 800026e:	220c      	movs	r2, #12
 8000270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <MX_USART2_UART_Init+0x4c>)
 8000280:	f001 f92a 	bl	80014d8 <HAL_UART_Init>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800028a:	f000 f875 	bl	8000378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000098 	.word	0x20000098
 8000298:	40004400 	.word	0x40004400

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b0:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <MX_GPIO_Init+0xcc>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a2c      	ldr	r2, [pc, #176]	; (8000368 <MX_GPIO_Init+0xcc>)
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b2a      	ldr	r3, [pc, #168]	; (8000368 <MX_GPIO_Init+0xcc>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0310 	and.w	r3, r3, #16
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c8:	4b27      	ldr	r3, [pc, #156]	; (8000368 <MX_GPIO_Init+0xcc>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a26      	ldr	r2, [pc, #152]	; (8000368 <MX_GPIO_Init+0xcc>)
 80002ce:	f043 0320 	orr.w	r3, r3, #32
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <MX_GPIO_Init+0xcc>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0320 	and.w	r3, r3, #32
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	4b21      	ldr	r3, [pc, #132]	; (8000368 <MX_GPIO_Init+0xcc>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a20      	ldr	r2, [pc, #128]	; (8000368 <MX_GPIO_Init+0xcc>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <MX_GPIO_Init+0xcc>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_GPIO_Init+0xcc>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a1a      	ldr	r2, [pc, #104]	; (8000368 <MX_GPIO_Init+0xcc>)
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_GPIO_Init+0xcc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0308 	and.w	r3, r3, #8
 800030c:	603b      	str	r3, [r7, #0]
 800030e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2120      	movs	r1, #32
 8000314:	4815      	ldr	r0, [pc, #84]	; (800036c <MX_GPIO_Init+0xd0>)
 8000316:	f000 fc89 	bl	8000c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800031a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000320:	4b13      	ldr	r3, [pc, #76]	; (8000370 <MX_GPIO_Init+0xd4>)
 8000322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000328:	f107 0310 	add.w	r3, r7, #16
 800032c:	4619      	mov	r1, r3
 800032e:	4811      	ldr	r0, [pc, #68]	; (8000374 <MX_GPIO_Init+0xd8>)
 8000330:	f000 fb22 	bl	8000978 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000334:	2320      	movs	r3, #32
 8000336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000338:	2301      	movs	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000340:	2302      	movs	r3, #2
 8000342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000344:	f107 0310 	add.w	r3, r7, #16
 8000348:	4619      	mov	r1, r3
 800034a:	4808      	ldr	r0, [pc, #32]	; (800036c <MX_GPIO_Init+0xd0>)
 800034c:	f000 fb14 	bl	8000978 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	2100      	movs	r1, #0
 8000354:	2028      	movs	r0, #40	; 0x28
 8000356:	f000 fad8 	bl	800090a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800035a:	2028      	movs	r0, #40	; 0x28
 800035c:	f000 faf1 	bl	8000942 <HAL_NVIC_EnableIRQ>

}
 8000360:	bf00      	nop
 8000362:	3720      	adds	r7, #32
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40021000 	.word	0x40021000
 800036c:	40010800 	.word	0x40010800
 8000370:	10110000 	.word	0x10110000
 8000374:	40011000 	.word	0x40011000

08000378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800037c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037e:	e7fe      	b.n	800037e <Error_Handler+0x6>

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <HAL_MspInit+0x5c>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a14      	ldr	r2, [pc, #80]	; (80003dc <HAL_MspInit+0x5c>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <HAL_MspInit+0x5c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <HAL_MspInit+0x5c>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003b6:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <HAL_MspInit+0x60>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <HAL_MspInit+0x60>)
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d2:	bf00      	nop
 80003d4:	3714      	adds	r7, #20
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010000 	.word	0x40010000

080003e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b088      	sub	sp, #32
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a15      	ldr	r2, [pc, #84]	; (8000454 <HAL_UART_MspInit+0x70>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d123      	bne.n	800044c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <HAL_UART_MspInit+0x74>)
 8000406:	69db      	ldr	r3, [r3, #28]
 8000408:	4a13      	ldr	r2, [pc, #76]	; (8000458 <HAL_UART_MspInit+0x74>)
 800040a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800040e:	61d3      	str	r3, [r2, #28]
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <HAL_UART_MspInit+0x74>)
 8000412:	69db      	ldr	r3, [r3, #28]
 8000414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <HAL_UART_MspInit+0x74>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <HAL_UART_MspInit+0x74>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <HAL_UART_MspInit+0x74>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0304 	and.w	r3, r3, #4
 8000430:	60bb      	str	r3, [r7, #8]
 8000432:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000434:	230c      	movs	r3, #12
 8000436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000438:	2302      	movs	r3, #2
 800043a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043c:	2302      	movs	r3, #2
 800043e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <HAL_UART_MspInit+0x78>)
 8000448:	f000 fa96 	bl	8000978 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800044c:	bf00      	nop
 800044e:	3720      	adds	r7, #32
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40004400 	.word	0x40004400
 8000458:	40021000 	.word	0x40021000
 800045c:	40010800 	.word	0x40010800

08000460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <NMI_Handler+0x4>

08000466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <MemManage_Handler+0x4>

08000472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <UsageFault_Handler+0x4>

0800047e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a6:	f000 f91b 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}

080004ae <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80004b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004b6:	f000 fbd1 	bl	8000c5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}

080004be <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b086      	sub	sp, #24
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	60f8      	str	r0, [r7, #12]
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	e00a      	b.n	80004e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004d0:	f3af 8000 	nop.w
 80004d4:	4601      	mov	r1, r0
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	1c5a      	adds	r2, r3, #1
 80004da:	60ba      	str	r2, [r7, #8]
 80004dc:	b2ca      	uxtb	r2, r1
 80004de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	3301      	adds	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	697a      	ldr	r2, [r7, #20]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	dbf0      	blt.n	80004d0 <_read+0x12>
	}

return len;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3718      	adds	r7, #24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	e009      	b.n	800051e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	1c5a      	adds	r2, r3, #1
 800050e:	60ba      	str	r2, [r7, #8]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fe1a 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	3301      	adds	r3, #1
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	697a      	ldr	r2, [r7, #20]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	429a      	cmp	r2, r3
 8000524:	dbf1      	blt.n	800050a <_write+0x12>
	}
	return len;
 8000526:	687b      	ldr	r3, [r7, #4]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <_close>:

int _close(int file)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	return -1;
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
 800054e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000556:	605a      	str	r2, [r3, #4]
	return 0;
 8000558:	2300      	movs	r3, #0
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <_isatty>:

int _isatty(int file)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	return 1;
 800056c:	2301      	movs	r3, #1
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
	return 0;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <_sbrk+0x5c>)
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <_sbrk+0x60>)
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <_sbrk+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <_sbrk+0x64>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <_sbrk+0x68>)
 80005b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <_sbrk+0x64>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d207      	bcs.n	80005d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c0:	f001 f942 	bl	8001848 <__errno>
 80005c4:	4602      	mov	r2, r0
 80005c6:	230c      	movs	r3, #12
 80005c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	e009      	b.n	80005e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <_sbrk+0x64>)
 80005e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20005000 	.word	0x20005000
 80005f0:	00000400 	.word	0x00000400
 80005f4:	2000008c 	.word	0x2000008c
 80005f8:	200000e8 	.word	0x200000e8

080005fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	; (800064c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800062e:	f7ff ffe5 	bl	80005fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000632:	f001 f90f 	bl	8001854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000636:	f7ff fda7 	bl	8000188 <main>
  bx lr
 800063a:	4770      	bx	lr
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000644:	08002250 	.word	0x08002250
  ldr r2, =_sbss
 8000648:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800064c:	200000e4 	.word	0x200000e4

08000650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC1_2_IRQHandler>
	...

08000654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_Init+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_Init+0x28>)
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f945 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f808 	bl	8000680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000670:	f7ff fe86 	bl	8000380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x54>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x58>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f95d 	bl	800095e <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00e      	b.n	80006cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d80a      	bhi.n	80006ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295
 80006bc:	f000 f925 	bl	800090a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_InitTick+0x5c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000004 	.word	0x20000004

080006e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x1c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x20>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a03      	ldr	r2, [pc, #12]	; (8000700 <HAL_IncTick+0x20>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000008 	.word	0x20000008
 8000700:	200000dc 	.word	0x200000dc

08000704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <HAL_GetTick+0x10>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	200000dc 	.word	0x200000dc

08000718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000720:	f7ff fff0 	bl	8000704 <HAL_GetTick>
 8000724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000730:	d005      	beq.n	800073e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <HAL_Delay+0x40>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4413      	add	r3, r2
 800073c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800073e:	bf00      	nop
 8000740:	f7ff ffe0 	bl	8000704 <HAL_GetTick>
 8000744:	4602      	mov	r2, r0
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	429a      	cmp	r2, r3
 800074e:	d8f7      	bhi.n	8000740 <HAL_Delay+0x28>
  {
  }
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000008 	.word	0x20000008

0800075c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <__NVIC_SetPriorityGrouping+0x44>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000778:	4013      	ands	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078e:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	60d3      	str	r3, [r2, #12]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <__NVIC_GetPriorityGrouping+0x18>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	f003 0307 	and.w	r3, r3, #7
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	db0b      	blt.n	80007ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	f003 021f 	and.w	r2, r3, #31
 80007d8:	4906      	ldr	r1, [pc, #24]	; (80007f4 <__NVIC_EnableIRQ+0x34>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	095b      	lsrs	r3, r3, #5
 80007e0:	2001      	movs	r0, #1
 80007e2:	fa00 f202 	lsl.w	r2, r0, r2
 80007e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	e000e100 	.word	0xe000e100

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	; (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	; 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f1c3 0307 	rsb	r3, r3, #7
 8000866:	2b04      	cmp	r3, #4
 8000868:	bf28      	it	cs
 800086a:	2304      	movcs	r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3304      	adds	r3, #4
 8000872:	2b06      	cmp	r3, #6
 8000874:	d902      	bls.n	800087c <NVIC_EncodePriority+0x30>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3b03      	subs	r3, #3
 800087a:	e000      	b.n	800087e <NVIC_EncodePriority+0x32>
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43d9      	mvns	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	4313      	orrs	r3, r2
         );
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	; 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f7ff ff90 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff2d 	bl	800075c <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff42 	bl	80007a4 <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ff90 	bl	800084c <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff5f 	bl	80007f8 <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff35 	bl	80007c0 <__NVIC_EnableIRQ>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ffa2 	bl	80008b0 <SysTick_Config>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b480      	push	{r7}
 800097a:	b08b      	sub	sp, #44	; 0x2c
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800098a:	e127      	b.n	8000bdc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800098c:	2201      	movs	r2, #1
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	69fa      	ldr	r2, [r7, #28]
 800099c:	4013      	ands	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	f040 8116 	bne.w	8000bd6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2b12      	cmp	r3, #18
 80009b0:	d034      	beq.n	8000a1c <HAL_GPIO_Init+0xa4>
 80009b2:	2b12      	cmp	r3, #18
 80009b4:	d80d      	bhi.n	80009d2 <HAL_GPIO_Init+0x5a>
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d02b      	beq.n	8000a12 <HAL_GPIO_Init+0x9a>
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d804      	bhi.n	80009c8 <HAL_GPIO_Init+0x50>
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d031      	beq.n	8000a26 <HAL_GPIO_Init+0xae>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d01c      	beq.n	8000a00 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009c6:	e048      	b.n	8000a5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d043      	beq.n	8000a54 <HAL_GPIO_Init+0xdc>
 80009cc:	2b11      	cmp	r3, #17
 80009ce:	d01b      	beq.n	8000a08 <HAL_GPIO_Init+0x90>
          break;
 80009d0:	e043      	b.n	8000a5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009d2:	4a89      	ldr	r2, [pc, #548]	; (8000bf8 <HAL_GPIO_Init+0x280>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d026      	beq.n	8000a26 <HAL_GPIO_Init+0xae>
 80009d8:	4a87      	ldr	r2, [pc, #540]	; (8000bf8 <HAL_GPIO_Init+0x280>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d806      	bhi.n	80009ec <HAL_GPIO_Init+0x74>
 80009de:	4a87      	ldr	r2, [pc, #540]	; (8000bfc <HAL_GPIO_Init+0x284>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d020      	beq.n	8000a26 <HAL_GPIO_Init+0xae>
 80009e4:	4a86      	ldr	r2, [pc, #536]	; (8000c00 <HAL_GPIO_Init+0x288>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d01d      	beq.n	8000a26 <HAL_GPIO_Init+0xae>
          break;
 80009ea:	e036      	b.n	8000a5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009ec:	4a85      	ldr	r2, [pc, #532]	; (8000c04 <HAL_GPIO_Init+0x28c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d019      	beq.n	8000a26 <HAL_GPIO_Init+0xae>
 80009f2:	4a85      	ldr	r2, [pc, #532]	; (8000c08 <HAL_GPIO_Init+0x290>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d016      	beq.n	8000a26 <HAL_GPIO_Init+0xae>
 80009f8:	4a84      	ldr	r2, [pc, #528]	; (8000c0c <HAL_GPIO_Init+0x294>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d013      	beq.n	8000a26 <HAL_GPIO_Init+0xae>
          break;
 80009fe:	e02c      	b.n	8000a5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	623b      	str	r3, [r7, #32]
          break;
 8000a06:	e028      	b.n	8000a5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	623b      	str	r3, [r7, #32]
          break;
 8000a10:	e023      	b.n	8000a5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	3308      	adds	r3, #8
 8000a18:	623b      	str	r3, [r7, #32]
          break;
 8000a1a:	e01e      	b.n	8000a5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	330c      	adds	r3, #12
 8000a22:	623b      	str	r3, [r7, #32]
          break;
 8000a24:	e019      	b.n	8000a5a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e012      	b.n	8000a5a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d105      	bne.n	8000a48 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	69fa      	ldr	r2, [r7, #28]
 8000a44:	611a      	str	r2, [r3, #16]
          break;
 8000a46:	e008      	b.n	8000a5a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	615a      	str	r2, [r3, #20]
          break;
 8000a52:	e002      	b.n	8000a5a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
          break;
 8000a58:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	2bff      	cmp	r3, #255	; 0xff
 8000a5e:	d801      	bhi.n	8000a64 <HAL_GPIO_Init+0xec>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	e001      	b.n	8000a68 <HAL_GPIO_Init+0xf0>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3304      	adds	r3, #4
 8000a68:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	2bff      	cmp	r3, #255	; 0xff
 8000a6e:	d802      	bhi.n	8000a76 <HAL_GPIO_Init+0xfe>
 8000a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	e002      	b.n	8000a7c <HAL_GPIO_Init+0x104>
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	3b08      	subs	r3, #8
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	210f      	movs	r1, #15
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	6a39      	ldr	r1, [r7, #32]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	431a      	orrs	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 8096 	beq.w	8000bd6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aaa:	4b59      	ldr	r3, [pc, #356]	; (8000c10 <HAL_GPIO_Init+0x298>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a58      	ldr	r2, [pc, #352]	; (8000c10 <HAL_GPIO_Init+0x298>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6193      	str	r3, [r2, #24]
 8000ab6:	4b56      	ldr	r3, [pc, #344]	; (8000c10 <HAL_GPIO_Init+0x298>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ac2:	4a54      	ldr	r2, [pc, #336]	; (8000c14 <HAL_GPIO_Init+0x29c>)
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	3302      	adds	r3, #2
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	220f      	movs	r2, #15
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4b      	ldr	r2, [pc, #300]	; (8000c18 <HAL_GPIO_Init+0x2a0>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d013      	beq.n	8000b16 <HAL_GPIO_Init+0x19e>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4a      	ldr	r2, [pc, #296]	; (8000c1c <HAL_GPIO_Init+0x2a4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d00d      	beq.n	8000b12 <HAL_GPIO_Init+0x19a>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a49      	ldr	r2, [pc, #292]	; (8000c20 <HAL_GPIO_Init+0x2a8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d007      	beq.n	8000b0e <HAL_GPIO_Init+0x196>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a48      	ldr	r2, [pc, #288]	; (8000c24 <HAL_GPIO_Init+0x2ac>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d101      	bne.n	8000b0a <HAL_GPIO_Init+0x192>
 8000b06:	2303      	movs	r3, #3
 8000b08:	e006      	b.n	8000b18 <HAL_GPIO_Init+0x1a0>
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	e004      	b.n	8000b18 <HAL_GPIO_Init+0x1a0>
 8000b0e:	2302      	movs	r3, #2
 8000b10:	e002      	b.n	8000b18 <HAL_GPIO_Init+0x1a0>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <HAL_GPIO_Init+0x1a0>
 8000b16:	2300      	movs	r3, #0
 8000b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b1a:	f002 0203 	and.w	r2, r2, #3
 8000b1e:	0092      	lsls	r2, r2, #2
 8000b20:	4093      	lsls	r3, r2
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b28:	493a      	ldr	r1, [pc, #232]	; (8000c14 <HAL_GPIO_Init+0x29c>)
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	3302      	adds	r3, #2
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d006      	beq.n	8000b50 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b42:	4b39      	ldr	r3, [pc, #228]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	4938      	ldr	r1, [pc, #224]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	600b      	str	r3, [r1, #0]
 8000b4e:	e006      	b.n	8000b5e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b50:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	4933      	ldr	r1, [pc, #204]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b6a:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	492e      	ldr	r1, [pc, #184]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	604b      	str	r3, [r1, #4]
 8000b76:	e006      	b.n	8000b86 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	4929      	ldr	r1, [pc, #164]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d006      	beq.n	8000ba0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4924      	ldr	r1, [pc, #144]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	608b      	str	r3, [r1, #8]
 8000b9e:	e006      	b.n	8000bae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ba0:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	491f      	ldr	r1, [pc, #124]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000baa:	4013      	ands	r3, r2
 8000bac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	491a      	ldr	r1, [pc, #104]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	60cb      	str	r3, [r1, #12]
 8000bc6:	e006      	b.n	8000bd6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	4915      	ldr	r1, [pc, #84]	; (8000c28 <HAL_GPIO_Init+0x2b0>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	3301      	adds	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	fa22 f303 	lsr.w	r3, r2, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f47f aed0 	bne.w	800098c <HAL_GPIO_Init+0x14>
  }
}
 8000bec:	bf00      	nop
 8000bee:	372c      	adds	r7, #44	; 0x2c
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	10210000 	.word	0x10210000
 8000bfc:	10110000 	.word	0x10110000
 8000c00:	10120000 	.word	0x10120000
 8000c04:	10310000 	.word	0x10310000
 8000c08:	10320000 	.word	0x10320000
 8000c0c:	10220000 	.word	0x10220000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40011400 	.word	0x40011400
 8000c28:	40010400 	.word	0x40010400

08000c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c3c:	787b      	ldrb	r3, [r7, #1]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c48:	e003      	b.n	8000c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	041a      	lsls	r2, r3, #16
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	611a      	str	r2, [r3, #16]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c68:	695a      	ldr	r2, [r3, #20]
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d006      	beq.n	8000c80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f806 	bl	8000c8c <HAL_GPIO_EXTI_Callback>
  }
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40010400 	.word	0x40010400

08000c8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e26c      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 8087 	beq.w	8000dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc0:	4b92      	ldr	r3, [pc, #584]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d00c      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ccc:	4b8f      	ldr	r3, [pc, #572]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d112      	bne.n	8000cfe <HAL_RCC_OscConfig+0x5e>
 8000cd8:	4b8c      	ldr	r3, [pc, #560]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce4:	d10b      	bne.n	8000cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce6:	4b89      	ldr	r3, [pc, #548]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d06c      	beq.n	8000dcc <HAL_RCC_OscConfig+0x12c>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d168      	bne.n	8000dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e246      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d06:	d106      	bne.n	8000d16 <HAL_RCC_OscConfig+0x76>
 8000d08:	4b80      	ldr	r3, [pc, #512]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a7f      	ldr	r2, [pc, #508]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	e02e      	b.n	8000d74 <HAL_RCC_OscConfig+0xd4>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x98>
 8000d1e:	4b7b      	ldr	r3, [pc, #492]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a7a      	ldr	r2, [pc, #488]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	4b78      	ldr	r3, [pc, #480]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a77      	ldr	r2, [pc, #476]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e01d      	b.n	8000d74 <HAL_RCC_OscConfig+0xd4>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d40:	d10c      	bne.n	8000d5c <HAL_RCC_OscConfig+0xbc>
 8000d42:	4b72      	ldr	r3, [pc, #456]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a71      	ldr	r2, [pc, #452]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b6f      	ldr	r3, [pc, #444]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a6e      	ldr	r2, [pc, #440]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e00b      	b.n	8000d74 <HAL_RCC_OscConfig+0xd4>
 8000d5c:	4b6b      	ldr	r3, [pc, #428]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a6a      	ldr	r2, [pc, #424]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b68      	ldr	r3, [pc, #416]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a67      	ldr	r2, [pc, #412]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d013      	beq.n	8000da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fcc2 	bl	8000704 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d84:	f7ff fcbe 	bl	8000704 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b64      	cmp	r3, #100	; 0x64
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e1fa      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d96:	4b5d      	ldr	r3, [pc, #372]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0f0      	beq.n	8000d84 <HAL_RCC_OscConfig+0xe4>
 8000da2:	e014      	b.n	8000dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fcae 	bl	8000704 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff fcaa 	bl	8000704 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	; 0x64
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e1e6      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dbe:	4b53      	ldr	r3, [pc, #332]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f0      	bne.n	8000dac <HAL_RCC_OscConfig+0x10c>
 8000dca:	e000      	b.n	8000dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d063      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dda:	4b4c      	ldr	r3, [pc, #304]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00b      	beq.n	8000dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000de6:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d11c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x18c>
 8000df2:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d116      	bne.n	8000e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfe:	4b43      	ldr	r3, [pc, #268]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d005      	beq.n	8000e16 <HAL_RCC_OscConfig+0x176>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d001      	beq.n	8000e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e1ba      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e16:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4939      	ldr	r1, [pc, #228]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2a:	e03a      	b.n	8000ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d020      	beq.n	8000e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e34:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fc63 	bl	8000704 <HAL_GetTick>
 8000e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e40:	e008      	b.n	8000e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e42:	f7ff fc5f 	bl	8000704 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e19b      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e54:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f0      	beq.n	8000e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e60:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4927      	ldr	r1, [pc, #156]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	600b      	str	r3, [r1, #0]
 8000e74:	e015      	b.n	8000ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fc42 	bl	8000704 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e84:	f7ff fc3e 	bl	8000704 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e17a      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f0      	bne.n	8000e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d03a      	beq.n	8000f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d019      	beq.n	8000eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_RCC_OscConfig+0x274>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ebc:	f7ff fc22 	bl	8000704 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec4:	f7ff fc1e 	bl	8000704 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e15a      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f0      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f000 fada 	bl	800149c <RCC_Delay>
 8000ee8:	e01c      	b.n	8000f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_RCC_OscConfig+0x274>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fc08 	bl	8000704 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef6:	e00f      	b.n	8000f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc04 	bl	8000704 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d908      	bls.n	8000f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e140      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	42420000 	.word	0x42420000
 8000f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f18:	4b9e      	ldr	r3, [pc, #632]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1e9      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80a6 	beq.w	800107e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f36:	4b97      	ldr	r3, [pc, #604]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10d      	bne.n	8000f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b94      	ldr	r3, [pc, #592]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a93      	ldr	r2, [pc, #588]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b91      	ldr	r3, [pc, #580]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5e:	4b8e      	ldr	r3, [pc, #568]	; (8001198 <HAL_RCC_OscConfig+0x4f8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d118      	bne.n	8000f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f6a:	4b8b      	ldr	r3, [pc, #556]	; (8001198 <HAL_RCC_OscConfig+0x4f8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a8a      	ldr	r2, [pc, #552]	; (8001198 <HAL_RCC_OscConfig+0x4f8>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f76:	f7ff fbc5 	bl	8000704 <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f7e:	f7ff fbc1 	bl	8000704 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b64      	cmp	r3, #100	; 0x64
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e0fd      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f90:	4b81      	ldr	r3, [pc, #516]	; (8001198 <HAL_RCC_OscConfig+0x4f8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0f0      	beq.n	8000f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d106      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x312>
 8000fa4:	4b7b      	ldr	r3, [pc, #492]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	4a7a      	ldr	r2, [pc, #488]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6213      	str	r3, [r2, #32]
 8000fb0:	e02d      	b.n	800100e <HAL_RCC_OscConfig+0x36e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x334>
 8000fba:	4b76      	ldr	r3, [pc, #472]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4a75      	ldr	r2, [pc, #468]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	6213      	str	r3, [r2, #32]
 8000fc6:	4b73      	ldr	r3, [pc, #460]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	4a72      	ldr	r2, [pc, #456]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	f023 0304 	bic.w	r3, r3, #4
 8000fd0:	6213      	str	r3, [r2, #32]
 8000fd2:	e01c      	b.n	800100e <HAL_RCC_OscConfig+0x36e>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2b05      	cmp	r3, #5
 8000fda:	d10c      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x356>
 8000fdc:	4b6d      	ldr	r3, [pc, #436]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	4a6c      	ldr	r2, [pc, #432]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6213      	str	r3, [r2, #32]
 8000fe8:	4b6a      	ldr	r3, [pc, #424]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	4a69      	ldr	r2, [pc, #420]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6213      	str	r3, [r2, #32]
 8000ff4:	e00b      	b.n	800100e <HAL_RCC_OscConfig+0x36e>
 8000ff6:	4b67      	ldr	r3, [pc, #412]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4a66      	ldr	r2, [pc, #408]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	f023 0301 	bic.w	r3, r3, #1
 8001000:	6213      	str	r3, [r2, #32]
 8001002:	4b64      	ldr	r3, [pc, #400]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a63      	ldr	r2, [pc, #396]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	f023 0304 	bic.w	r3, r3, #4
 800100c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d015      	beq.n	8001042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001016:	f7ff fb75 	bl	8000704 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101c:	e00a      	b.n	8001034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800101e:	f7ff fb71 	bl	8000704 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	f241 3288 	movw	r2, #5000	; 0x1388
 800102c:	4293      	cmp	r3, r2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e0ab      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001034:	4b57      	ldr	r3, [pc, #348]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0ee      	beq.n	800101e <HAL_RCC_OscConfig+0x37e>
 8001040:	e014      	b.n	800106c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fb5f 	bl	8000704 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001048:	e00a      	b.n	8001060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff fb5b 	bl	8000704 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	f241 3288 	movw	r2, #5000	; 0x1388
 8001058:	4293      	cmp	r3, r2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e095      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001060:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1ee      	bne.n	800104a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d105      	bne.n	800107e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001072:	4b48      	ldr	r3, [pc, #288]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a47      	ldr	r2, [pc, #284]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800107c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 8081 	beq.w	800118a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001088:	4b42      	ldr	r3, [pc, #264]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b08      	cmp	r3, #8
 8001092:	d061      	beq.n	8001158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d146      	bne.n	800112a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109c:	4b3f      	ldr	r3, [pc, #252]	; (800119c <HAL_RCC_OscConfig+0x4fc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fb2f 	bl	8000704 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff fb2b 	bl	8000704 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e067      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010bc:	4b35      	ldr	r3, [pc, #212]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f0      	bne.n	80010aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d0:	d108      	bne.n	80010e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010d2:	4b30      	ldr	r3, [pc, #192]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	492d      	ldr	r1, [pc, #180]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a19      	ldr	r1, [r3, #32]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	430b      	orrs	r3, r1
 80010f6:	4927      	ldr	r1, [pc, #156]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <HAL_RCC_OscConfig+0x4fc>)
 80010fe:	2201      	movs	r2, #1
 8001100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff faff 	bl	8000704 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110a:	f7ff fafb 	bl	8000704 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e037      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0x46a>
 8001128:	e02f      	b.n	800118a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_RCC_OscConfig+0x4fc>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fae8 	bl	8000704 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001138:	f7ff fae4 	bl	8000704 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e020      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x498>
 8001156:	e018      	b.n	800118a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e013      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_RCC_OscConfig+0x4f4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	429a      	cmp	r2, r3
 8001176:	d106      	bne.n	8001186 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001182:	429a      	cmp	r2, r3
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	40007000 	.word	0x40007000
 800119c:	42420060 	.word	0x42420060

080011a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e0d0      	b.n	8001356 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011b4:	4b6a      	ldr	r3, [pc, #424]	; (8001360 <HAL_RCC_ClockConfig+0x1c0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d910      	bls.n	80011e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c2:	4b67      	ldr	r3, [pc, #412]	; (8001360 <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 0207 	bic.w	r2, r3, #7
 80011ca:	4965      	ldr	r1, [pc, #404]	; (8001360 <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d2:	4b63      	ldr	r3, [pc, #396]	; (8001360 <HAL_RCC_ClockConfig+0x1c0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d001      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0b8      	b.n	8001356 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d020      	beq.n	8001232 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011fc:	4b59      	ldr	r3, [pc, #356]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4a58      	ldr	r2, [pc, #352]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001206:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001214:	4b53      	ldr	r3, [pc, #332]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a52      	ldr	r2, [pc, #328]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800121e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001220:	4b50      	ldr	r3, [pc, #320]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	494d      	ldr	r1, [pc, #308]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d040      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d107      	bne.n	8001256 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	4b47      	ldr	r3, [pc, #284]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d115      	bne.n	800127e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e07f      	b.n	8001356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d107      	bne.n	800126e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800125e:	4b41      	ldr	r3, [pc, #260]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d109      	bne.n	800127e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e073      	b.n	8001356 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126e:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e06b      	b.n	8001356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800127e:	4b39      	ldr	r3, [pc, #228]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f023 0203 	bic.w	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4936      	ldr	r1, [pc, #216]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001290:	f7ff fa38 	bl	8000704 <HAL_GetTick>
 8001294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001296:	e00a      	b.n	80012ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001298:	f7ff fa34 	bl	8000704 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e053      	b.n	8001356 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ae:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 020c 	and.w	r2, r3, #12
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	429a      	cmp	r2, r3
 80012be:	d1eb      	bne.n	8001298 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_RCC_ClockConfig+0x1c0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d210      	bcs.n	80012f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 0207 	bic.w	r2, r3, #7
 80012d6:	4922      	ldr	r1, [pc, #136]	; (8001360 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d001      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e032      	b.n	8001356 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d008      	beq.n	800130e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	4916      	ldr	r1, [pc, #88]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d009      	beq.n	800132e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	490e      	ldr	r1, [pc, #56]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800132e:	f000 f821 	bl	8001374 <HAL_RCC_GetSysClockFreq>
 8001332:	4601      	mov	r1, r0
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_RCC_ClockConfig+0x1c8>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	fa21 f303 	lsr.w	r3, r1, r3
 8001346:	4a09      	ldr	r2, [pc, #36]	; (800136c <HAL_RCC_ClockConfig+0x1cc>)
 8001348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_RCC_ClockConfig+0x1d0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f996 	bl	8000680 <HAL_InitTick>

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40022000 	.word	0x40022000
 8001364:	40021000 	.word	0x40021000
 8001368:	080021cc 	.word	0x080021cc
 800136c:	20000000 	.word	0x20000000
 8001370:	20000004 	.word	0x20000004

08001374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001374:	b490      	push	{r4, r7}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <HAL_RCC_GetSysClockFreq+0xb0>)
 800137c:	1d3c      	adds	r4, r7, #4
 800137e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001384:	4b28      	ldr	r3, [pc, #160]	; (8001428 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d002      	beq.n	80013b4 <HAL_RCC_GetSysClockFreq+0x40>
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d003      	beq.n	80013ba <HAL_RCC_GetSysClockFreq+0x46>
 80013b2:	e02d      	b.n	8001410 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013b6:	623b      	str	r3, [r7, #32]
      break;
 80013b8:	e02d      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	0c9b      	lsrs	r3, r3, #18
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013c6:	4413      	add	r3, r2
 80013c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	0c5b      	lsrs	r3, r3, #17
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013e6:	4413      	add	r3, r2
 80013e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013f2:	fb02 f203 	mul.w	r2, r2, r3
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
 80013fe:	e004      	b.n	800140a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	623b      	str	r3, [r7, #32]
      break;
 800140e:	e002      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001412:	623b      	str	r3, [r7, #32]
      break;
 8001414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001416:	6a3b      	ldr	r3, [r7, #32]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bc90      	pop	{r4, r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	080021b8 	.word	0x080021b8
 8001428:	080021c8 	.word	0x080021c8
 800142c:	40021000 	.word	0x40021000
 8001430:	007a1200 	.word	0x007a1200
 8001434:	003d0900 	.word	0x003d0900

08001438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <HAL_RCC_GetHCLKFreq+0x10>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000000 	.word	0x20000000

0800144c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001450:	f7ff fff2 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001454:	4601      	mov	r1, r0
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	4a03      	ldr	r2, [pc, #12]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001462:	5cd3      	ldrb	r3, [r2, r3]
 8001464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	080021dc 	.word	0x080021dc

08001474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001478:	f7ff ffde 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 800147c:	4601      	mov	r1, r0
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	0adb      	lsrs	r3, r3, #11
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	4a03      	ldr	r2, [pc, #12]	; (8001498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800148a:	5cd3      	ldrb	r3, [r2, r3]
 800148c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	080021dc 	.word	0x080021dc

0800149c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <RCC_Delay+0x34>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <RCC_Delay+0x38>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0a5b      	lsrs	r3, r3, #9
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014b8:	bf00      	nop
  }
  while (Delay --);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	60fa      	str	r2, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f9      	bne.n	80014b8 <RCC_Delay+0x1c>
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000000 	.word	0x20000000
 80014d4:	10624dd3 	.word	0x10624dd3

080014d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e03f      	b.n	800156a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7fe ff70 	bl	80003e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2224      	movs	r2, #36	; 0x24
 8001508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800151a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f905 	bl	800172c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001540:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001550:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2220      	movs	r2, #32
 800155c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b08a      	sub	sp, #40	; 0x28
 8001576:	af02      	add	r7, sp, #8
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4613      	mov	r3, r2
 8001580:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b20      	cmp	r3, #32
 8001590:	d17c      	bne.n	800168c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_UART_Transmit+0x2c>
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e075      	b.n	800168e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_UART_Transmit+0x3e>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e06e      	b.n	800168e <HAL_UART_Transmit+0x11c>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2221      	movs	r2, #33	; 0x21
 80015c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015c6:	f7ff f89d 	bl	8000704 <HAL_GetTick>
 80015ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	88fa      	ldrh	r2, [r7, #6]
 80015d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015e0:	d108      	bne.n	80015f4 <HAL_UART_Transmit+0x82>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d104      	bne.n	80015f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	e003      	b.n	80015fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001604:	e02a      	b.n	800165c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2200      	movs	r2, #0
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 f840 	bl	8001696 <UART_WaitOnFlagUntilTimeout>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e036      	b.n	800168e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10b      	bne.n	800163e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001634:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	3302      	adds	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	e007      	b.n	800164e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	3301      	adds	r3, #1
 800164c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001652:	b29b      	uxth	r3, r3
 8001654:	3b01      	subs	r3, #1
 8001656:	b29a      	uxth	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001660:	b29b      	uxth	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1cf      	bne.n	8001606 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2200      	movs	r2, #0
 800166e:	2140      	movs	r1, #64	; 0x40
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 f810 	bl	8001696 <UART_WaitOnFlagUntilTimeout>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e006      	b.n	800168e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2220      	movs	r2, #32
 8001684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	e000      	b.n	800168e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800168c:	2302      	movs	r3, #2
  }
}
 800168e:	4618      	mov	r0, r3
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	4613      	mov	r3, r2
 80016a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016a6:	e02c      	b.n	8001702 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ae:	d028      	beq.n	8001702 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80016b6:	f7ff f825 	bl	8000704 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d21d      	bcs.n	8001702 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80016d4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0201 	bic.w	r2, r2, #1
 80016e4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2220      	movs	r2, #32
 80016ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2220      	movs	r2, #32
 80016f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e00f      	b.n	8001722 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4013      	ands	r3, r2
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	429a      	cmp	r2, r3
 8001710:	bf0c      	ite	eq
 8001712:	2301      	moveq	r3, #1
 8001714:	2300      	movne	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	429a      	cmp	r2, r3
 800171e:	d0c3      	beq.n	80016a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	4313      	orrs	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001766:	f023 030c 	bic.w	r3, r3, #12
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	430b      	orrs	r3, r1
 8001772:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699a      	ldr	r2, [r3, #24]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a2c      	ldr	r2, [pc, #176]	; (8001840 <UART_SetConfig+0x114>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d103      	bne.n	800179c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001794:	f7ff fe6e 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	e002      	b.n	80017a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800179c:	f7ff fe56 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 80017a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	009a      	lsls	r2, r3, #2
 80017ac:	441a      	add	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	4a22      	ldr	r2, [pc, #136]	; (8001844 <UART_SetConfig+0x118>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	0119      	lsls	r1, r3, #4
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	009a      	lsls	r2, r3, #2
 80017cc:	441a      	add	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <UART_SetConfig+0x118>)
 80017da:	fba3 0302 	umull	r0, r3, r3, r2
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2064      	movs	r0, #100	; 0x64
 80017e2:	fb00 f303 	mul.w	r3, r0, r3
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	3332      	adds	r3, #50	; 0x32
 80017ec:	4a15      	ldr	r2, [pc, #84]	; (8001844 <UART_SetConfig+0x118>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f8:	4419      	add	r1, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009a      	lsls	r2, r3, #2
 8001804:	441a      	add	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <UART_SetConfig+0x118>)
 8001812:	fba3 0302 	umull	r0, r3, r3, r2
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2064      	movs	r0, #100	; 0x64
 800181a:	fb00 f303 	mul.w	r3, r0, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	3332      	adds	r3, #50	; 0x32
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <UART_SetConfig+0x118>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	f003 020f 	and.w	r2, r3, #15
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	440a      	add	r2, r1
 8001836:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40013800 	.word	0x40013800
 8001844:	51eb851f 	.word	0x51eb851f

08001848 <__errno>:
 8001848:	4b01      	ldr	r3, [pc, #4]	; (8001850 <__errno+0x8>)
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	2000000c 	.word	0x2000000c

08001854 <__libc_init_array>:
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	2500      	movs	r5, #0
 8001858:	4e0c      	ldr	r6, [pc, #48]	; (800188c <__libc_init_array+0x38>)
 800185a:	4c0d      	ldr	r4, [pc, #52]	; (8001890 <__libc_init_array+0x3c>)
 800185c:	1ba4      	subs	r4, r4, r6
 800185e:	10a4      	asrs	r4, r4, #2
 8001860:	42a5      	cmp	r5, r4
 8001862:	d109      	bne.n	8001878 <__libc_init_array+0x24>
 8001864:	f000 fc88 	bl	8002178 <_init>
 8001868:	2500      	movs	r5, #0
 800186a:	4e0a      	ldr	r6, [pc, #40]	; (8001894 <__libc_init_array+0x40>)
 800186c:	4c0a      	ldr	r4, [pc, #40]	; (8001898 <__libc_init_array+0x44>)
 800186e:	1ba4      	subs	r4, r4, r6
 8001870:	10a4      	asrs	r4, r4, #2
 8001872:	42a5      	cmp	r5, r4
 8001874:	d105      	bne.n	8001882 <__libc_init_array+0x2e>
 8001876:	bd70      	pop	{r4, r5, r6, pc}
 8001878:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800187c:	4798      	blx	r3
 800187e:	3501      	adds	r5, #1
 8001880:	e7ee      	b.n	8001860 <__libc_init_array+0xc>
 8001882:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001886:	4798      	blx	r3
 8001888:	3501      	adds	r5, #1
 800188a:	e7f2      	b.n	8001872 <__libc_init_array+0x1e>
 800188c:	08002248 	.word	0x08002248
 8001890:	08002248 	.word	0x08002248
 8001894:	08002248 	.word	0x08002248
 8001898:	0800224c 	.word	0x0800224c

0800189c <memset>:
 800189c:	4603      	mov	r3, r0
 800189e:	4402      	add	r2, r0
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d100      	bne.n	80018a6 <memset+0xa>
 80018a4:	4770      	bx	lr
 80018a6:	f803 1b01 	strb.w	r1, [r3], #1
 80018aa:	e7f9      	b.n	80018a0 <memset+0x4>

080018ac <_puts_r>:
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	460e      	mov	r6, r1
 80018b0:	4605      	mov	r5, r0
 80018b2:	b118      	cbz	r0, 80018bc <_puts_r+0x10>
 80018b4:	6983      	ldr	r3, [r0, #24]
 80018b6:	b90b      	cbnz	r3, 80018bc <_puts_r+0x10>
 80018b8:	f000 fa0c 	bl	8001cd4 <__sinit>
 80018bc:	69ab      	ldr	r3, [r5, #24]
 80018be:	68ac      	ldr	r4, [r5, #8]
 80018c0:	b913      	cbnz	r3, 80018c8 <_puts_r+0x1c>
 80018c2:	4628      	mov	r0, r5
 80018c4:	f000 fa06 	bl	8001cd4 <__sinit>
 80018c8:	4b23      	ldr	r3, [pc, #140]	; (8001958 <_puts_r+0xac>)
 80018ca:	429c      	cmp	r4, r3
 80018cc:	d117      	bne.n	80018fe <_puts_r+0x52>
 80018ce:	686c      	ldr	r4, [r5, #4]
 80018d0:	89a3      	ldrh	r3, [r4, #12]
 80018d2:	071b      	lsls	r3, r3, #28
 80018d4:	d51d      	bpl.n	8001912 <_puts_r+0x66>
 80018d6:	6923      	ldr	r3, [r4, #16]
 80018d8:	b1db      	cbz	r3, 8001912 <_puts_r+0x66>
 80018da:	3e01      	subs	r6, #1
 80018dc:	68a3      	ldr	r3, [r4, #8]
 80018de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80018e2:	3b01      	subs	r3, #1
 80018e4:	60a3      	str	r3, [r4, #8]
 80018e6:	b9e9      	cbnz	r1, 8001924 <_puts_r+0x78>
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da2e      	bge.n	800194a <_puts_r+0x9e>
 80018ec:	4622      	mov	r2, r4
 80018ee:	210a      	movs	r1, #10
 80018f0:	4628      	mov	r0, r5
 80018f2:	f000 f83f 	bl	8001974 <__swbuf_r>
 80018f6:	3001      	adds	r0, #1
 80018f8:	d011      	beq.n	800191e <_puts_r+0x72>
 80018fa:	200a      	movs	r0, #10
 80018fc:	e011      	b.n	8001922 <_puts_r+0x76>
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <_puts_r+0xb0>)
 8001900:	429c      	cmp	r4, r3
 8001902:	d101      	bne.n	8001908 <_puts_r+0x5c>
 8001904:	68ac      	ldr	r4, [r5, #8]
 8001906:	e7e3      	b.n	80018d0 <_puts_r+0x24>
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <_puts_r+0xb4>)
 800190a:	429c      	cmp	r4, r3
 800190c:	bf08      	it	eq
 800190e:	68ec      	ldreq	r4, [r5, #12]
 8001910:	e7de      	b.n	80018d0 <_puts_r+0x24>
 8001912:	4621      	mov	r1, r4
 8001914:	4628      	mov	r0, r5
 8001916:	f000 f87f 	bl	8001a18 <__swsetup_r>
 800191a:	2800      	cmp	r0, #0
 800191c:	d0dd      	beq.n	80018da <_puts_r+0x2e>
 800191e:	f04f 30ff 	mov.w	r0, #4294967295
 8001922:	bd70      	pop	{r4, r5, r6, pc}
 8001924:	2b00      	cmp	r3, #0
 8001926:	da04      	bge.n	8001932 <_puts_r+0x86>
 8001928:	69a2      	ldr	r2, [r4, #24]
 800192a:	429a      	cmp	r2, r3
 800192c:	dc06      	bgt.n	800193c <_puts_r+0x90>
 800192e:	290a      	cmp	r1, #10
 8001930:	d004      	beq.n	800193c <_puts_r+0x90>
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	6022      	str	r2, [r4, #0]
 8001938:	7019      	strb	r1, [r3, #0]
 800193a:	e7cf      	b.n	80018dc <_puts_r+0x30>
 800193c:	4622      	mov	r2, r4
 800193e:	4628      	mov	r0, r5
 8001940:	f000 f818 	bl	8001974 <__swbuf_r>
 8001944:	3001      	adds	r0, #1
 8001946:	d1c9      	bne.n	80018dc <_puts_r+0x30>
 8001948:	e7e9      	b.n	800191e <_puts_r+0x72>
 800194a:	200a      	movs	r0, #10
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	6022      	str	r2, [r4, #0]
 8001952:	7018      	strb	r0, [r3, #0]
 8001954:	e7e5      	b.n	8001922 <_puts_r+0x76>
 8001956:	bf00      	nop
 8001958:	08002208 	.word	0x08002208
 800195c:	08002228 	.word	0x08002228
 8001960:	080021e8 	.word	0x080021e8

08001964 <puts>:
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <puts+0xc>)
 8001966:	4601      	mov	r1, r0
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	f7ff bf9f 	b.w	80018ac <_puts_r>
 800196e:	bf00      	nop
 8001970:	2000000c 	.word	0x2000000c

08001974 <__swbuf_r>:
 8001974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001976:	460e      	mov	r6, r1
 8001978:	4614      	mov	r4, r2
 800197a:	4605      	mov	r5, r0
 800197c:	b118      	cbz	r0, 8001986 <__swbuf_r+0x12>
 800197e:	6983      	ldr	r3, [r0, #24]
 8001980:	b90b      	cbnz	r3, 8001986 <__swbuf_r+0x12>
 8001982:	f000 f9a7 	bl	8001cd4 <__sinit>
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <__swbuf_r+0x98>)
 8001988:	429c      	cmp	r4, r3
 800198a:	d12a      	bne.n	80019e2 <__swbuf_r+0x6e>
 800198c:	686c      	ldr	r4, [r5, #4]
 800198e:	69a3      	ldr	r3, [r4, #24]
 8001990:	60a3      	str	r3, [r4, #8]
 8001992:	89a3      	ldrh	r3, [r4, #12]
 8001994:	071a      	lsls	r2, r3, #28
 8001996:	d52e      	bpl.n	80019f6 <__swbuf_r+0x82>
 8001998:	6923      	ldr	r3, [r4, #16]
 800199a:	b363      	cbz	r3, 80019f6 <__swbuf_r+0x82>
 800199c:	6923      	ldr	r3, [r4, #16]
 800199e:	6820      	ldr	r0, [r4, #0]
 80019a0:	b2f6      	uxtb	r6, r6
 80019a2:	1ac0      	subs	r0, r0, r3
 80019a4:	6963      	ldr	r3, [r4, #20]
 80019a6:	4637      	mov	r7, r6
 80019a8:	4283      	cmp	r3, r0
 80019aa:	dc04      	bgt.n	80019b6 <__swbuf_r+0x42>
 80019ac:	4621      	mov	r1, r4
 80019ae:	4628      	mov	r0, r5
 80019b0:	f000 f926 	bl	8001c00 <_fflush_r>
 80019b4:	bb28      	cbnz	r0, 8001a02 <__swbuf_r+0x8e>
 80019b6:	68a3      	ldr	r3, [r4, #8]
 80019b8:	3001      	adds	r0, #1
 80019ba:	3b01      	subs	r3, #1
 80019bc:	60a3      	str	r3, [r4, #8]
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	6022      	str	r2, [r4, #0]
 80019c4:	701e      	strb	r6, [r3, #0]
 80019c6:	6963      	ldr	r3, [r4, #20]
 80019c8:	4283      	cmp	r3, r0
 80019ca:	d004      	beq.n	80019d6 <__swbuf_r+0x62>
 80019cc:	89a3      	ldrh	r3, [r4, #12]
 80019ce:	07db      	lsls	r3, r3, #31
 80019d0:	d519      	bpl.n	8001a06 <__swbuf_r+0x92>
 80019d2:	2e0a      	cmp	r6, #10
 80019d4:	d117      	bne.n	8001a06 <__swbuf_r+0x92>
 80019d6:	4621      	mov	r1, r4
 80019d8:	4628      	mov	r0, r5
 80019da:	f000 f911 	bl	8001c00 <_fflush_r>
 80019de:	b190      	cbz	r0, 8001a06 <__swbuf_r+0x92>
 80019e0:	e00f      	b.n	8001a02 <__swbuf_r+0x8e>
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <__swbuf_r+0x9c>)
 80019e4:	429c      	cmp	r4, r3
 80019e6:	d101      	bne.n	80019ec <__swbuf_r+0x78>
 80019e8:	68ac      	ldr	r4, [r5, #8]
 80019ea:	e7d0      	b.n	800198e <__swbuf_r+0x1a>
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <__swbuf_r+0xa0>)
 80019ee:	429c      	cmp	r4, r3
 80019f0:	bf08      	it	eq
 80019f2:	68ec      	ldreq	r4, [r5, #12]
 80019f4:	e7cb      	b.n	800198e <__swbuf_r+0x1a>
 80019f6:	4621      	mov	r1, r4
 80019f8:	4628      	mov	r0, r5
 80019fa:	f000 f80d 	bl	8001a18 <__swsetup_r>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d0cc      	beq.n	800199c <__swbuf_r+0x28>
 8001a02:	f04f 37ff 	mov.w	r7, #4294967295
 8001a06:	4638      	mov	r0, r7
 8001a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	08002208 	.word	0x08002208
 8001a10:	08002228 	.word	0x08002228
 8001a14:	080021e8 	.word	0x080021e8

08001a18 <__swsetup_r>:
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <__swsetup_r+0xcc>)
 8001a1a:	b570      	push	{r4, r5, r6, lr}
 8001a1c:	681d      	ldr	r5, [r3, #0]
 8001a1e:	4606      	mov	r6, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	b125      	cbz	r5, 8001a2e <__swsetup_r+0x16>
 8001a24:	69ab      	ldr	r3, [r5, #24]
 8001a26:	b913      	cbnz	r3, 8001a2e <__swsetup_r+0x16>
 8001a28:	4628      	mov	r0, r5
 8001a2a:	f000 f953 	bl	8001cd4 <__sinit>
 8001a2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <__swsetup_r+0xd0>)
 8001a30:	429c      	cmp	r4, r3
 8001a32:	d10f      	bne.n	8001a54 <__swsetup_r+0x3c>
 8001a34:	686c      	ldr	r4, [r5, #4]
 8001a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	0715      	lsls	r5, r2, #28
 8001a3e:	d42c      	bmi.n	8001a9a <__swsetup_r+0x82>
 8001a40:	06d0      	lsls	r0, r2, #27
 8001a42:	d411      	bmi.n	8001a68 <__swsetup_r+0x50>
 8001a44:	2209      	movs	r2, #9
 8001a46:	6032      	str	r2, [r6, #0]
 8001a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a4c:	81a3      	strh	r3, [r4, #12]
 8001a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a52:	e03e      	b.n	8001ad2 <__swsetup_r+0xba>
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <__swsetup_r+0xd4>)
 8001a56:	429c      	cmp	r4, r3
 8001a58:	d101      	bne.n	8001a5e <__swsetup_r+0x46>
 8001a5a:	68ac      	ldr	r4, [r5, #8]
 8001a5c:	e7eb      	b.n	8001a36 <__swsetup_r+0x1e>
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <__swsetup_r+0xd8>)
 8001a60:	429c      	cmp	r4, r3
 8001a62:	bf08      	it	eq
 8001a64:	68ec      	ldreq	r4, [r5, #12]
 8001a66:	e7e6      	b.n	8001a36 <__swsetup_r+0x1e>
 8001a68:	0751      	lsls	r1, r2, #29
 8001a6a:	d512      	bpl.n	8001a92 <__swsetup_r+0x7a>
 8001a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a6e:	b141      	cbz	r1, 8001a82 <__swsetup_r+0x6a>
 8001a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a74:	4299      	cmp	r1, r3
 8001a76:	d002      	beq.n	8001a7e <__swsetup_r+0x66>
 8001a78:	4630      	mov	r0, r6
 8001a7a:	f000 fa19 	bl	8001eb0 <_free_r>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	6363      	str	r3, [r4, #52]	; 0x34
 8001a82:	89a3      	ldrh	r3, [r4, #12]
 8001a84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001a88:	81a3      	strh	r3, [r4, #12]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	6063      	str	r3, [r4, #4]
 8001a8e:	6923      	ldr	r3, [r4, #16]
 8001a90:	6023      	str	r3, [r4, #0]
 8001a92:	89a3      	ldrh	r3, [r4, #12]
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	81a3      	strh	r3, [r4, #12]
 8001a9a:	6923      	ldr	r3, [r4, #16]
 8001a9c:	b94b      	cbnz	r3, 8001ab2 <__swsetup_r+0x9a>
 8001a9e:	89a3      	ldrh	r3, [r4, #12]
 8001aa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa8:	d003      	beq.n	8001ab2 <__swsetup_r+0x9a>
 8001aaa:	4621      	mov	r1, r4
 8001aac:	4630      	mov	r0, r6
 8001aae:	f000 f9bf 	bl	8001e30 <__smakebuf_r>
 8001ab2:	89a2      	ldrh	r2, [r4, #12]
 8001ab4:	f012 0301 	ands.w	r3, r2, #1
 8001ab8:	d00c      	beq.n	8001ad4 <__swsetup_r+0xbc>
 8001aba:	2300      	movs	r3, #0
 8001abc:	60a3      	str	r3, [r4, #8]
 8001abe:	6963      	ldr	r3, [r4, #20]
 8001ac0:	425b      	negs	r3, r3
 8001ac2:	61a3      	str	r3, [r4, #24]
 8001ac4:	6923      	ldr	r3, [r4, #16]
 8001ac6:	b953      	cbnz	r3, 8001ade <__swsetup_r+0xc6>
 8001ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001acc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001ad0:	d1ba      	bne.n	8001a48 <__swsetup_r+0x30>
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}
 8001ad4:	0792      	lsls	r2, r2, #30
 8001ad6:	bf58      	it	pl
 8001ad8:	6963      	ldrpl	r3, [r4, #20]
 8001ada:	60a3      	str	r3, [r4, #8]
 8001adc:	e7f2      	b.n	8001ac4 <__swsetup_r+0xac>
 8001ade:	2000      	movs	r0, #0
 8001ae0:	e7f7      	b.n	8001ad2 <__swsetup_r+0xba>
 8001ae2:	bf00      	nop
 8001ae4:	2000000c 	.word	0x2000000c
 8001ae8:	08002208 	.word	0x08002208
 8001aec:	08002228 	.word	0x08002228
 8001af0:	080021e8 	.word	0x080021e8

08001af4 <__sflush_r>:
 8001af4:	898a      	ldrh	r2, [r1, #12]
 8001af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001afa:	4605      	mov	r5, r0
 8001afc:	0710      	lsls	r0, r2, #28
 8001afe:	460c      	mov	r4, r1
 8001b00:	d458      	bmi.n	8001bb4 <__sflush_r+0xc0>
 8001b02:	684b      	ldr	r3, [r1, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	dc05      	bgt.n	8001b14 <__sflush_r+0x20>
 8001b08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	dc02      	bgt.n	8001b14 <__sflush_r+0x20>
 8001b0e:	2000      	movs	r0, #0
 8001b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b16:	2e00      	cmp	r6, #0
 8001b18:	d0f9      	beq.n	8001b0e <__sflush_r+0x1a>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b20:	682f      	ldr	r7, [r5, #0]
 8001b22:	6a21      	ldr	r1, [r4, #32]
 8001b24:	602b      	str	r3, [r5, #0]
 8001b26:	d032      	beq.n	8001b8e <__sflush_r+0x9a>
 8001b28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b2a:	89a3      	ldrh	r3, [r4, #12]
 8001b2c:	075a      	lsls	r2, r3, #29
 8001b2e:	d505      	bpl.n	8001b3c <__sflush_r+0x48>
 8001b30:	6863      	ldr	r3, [r4, #4]
 8001b32:	1ac0      	subs	r0, r0, r3
 8001b34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b36:	b10b      	cbz	r3, 8001b3c <__sflush_r+0x48>
 8001b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b3a:	1ac0      	subs	r0, r0, r3
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	4602      	mov	r2, r0
 8001b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b42:	6a21      	ldr	r1, [r4, #32]
 8001b44:	4628      	mov	r0, r5
 8001b46:	47b0      	blx	r6
 8001b48:	1c43      	adds	r3, r0, #1
 8001b4a:	89a3      	ldrh	r3, [r4, #12]
 8001b4c:	d106      	bne.n	8001b5c <__sflush_r+0x68>
 8001b4e:	6829      	ldr	r1, [r5, #0]
 8001b50:	291d      	cmp	r1, #29
 8001b52:	d848      	bhi.n	8001be6 <__sflush_r+0xf2>
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <__sflush_r+0x108>)
 8001b56:	40ca      	lsrs	r2, r1
 8001b58:	07d6      	lsls	r6, r2, #31
 8001b5a:	d544      	bpl.n	8001be6 <__sflush_r+0xf2>
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6062      	str	r2, [r4, #4]
 8001b60:	6922      	ldr	r2, [r4, #16]
 8001b62:	04d9      	lsls	r1, r3, #19
 8001b64:	6022      	str	r2, [r4, #0]
 8001b66:	d504      	bpl.n	8001b72 <__sflush_r+0x7e>
 8001b68:	1c42      	adds	r2, r0, #1
 8001b6a:	d101      	bne.n	8001b70 <__sflush_r+0x7c>
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	b903      	cbnz	r3, 8001b72 <__sflush_r+0x7e>
 8001b70:	6560      	str	r0, [r4, #84]	; 0x54
 8001b72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b74:	602f      	str	r7, [r5, #0]
 8001b76:	2900      	cmp	r1, #0
 8001b78:	d0c9      	beq.n	8001b0e <__sflush_r+0x1a>
 8001b7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b7e:	4299      	cmp	r1, r3
 8001b80:	d002      	beq.n	8001b88 <__sflush_r+0x94>
 8001b82:	4628      	mov	r0, r5
 8001b84:	f000 f994 	bl	8001eb0 <_free_r>
 8001b88:	2000      	movs	r0, #0
 8001b8a:	6360      	str	r0, [r4, #52]	; 0x34
 8001b8c:	e7c0      	b.n	8001b10 <__sflush_r+0x1c>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	4628      	mov	r0, r5
 8001b92:	47b0      	blx	r6
 8001b94:	1c41      	adds	r1, r0, #1
 8001b96:	d1c8      	bne.n	8001b2a <__sflush_r+0x36>
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0c5      	beq.n	8001b2a <__sflush_r+0x36>
 8001b9e:	2b1d      	cmp	r3, #29
 8001ba0:	d001      	beq.n	8001ba6 <__sflush_r+0xb2>
 8001ba2:	2b16      	cmp	r3, #22
 8001ba4:	d101      	bne.n	8001baa <__sflush_r+0xb6>
 8001ba6:	602f      	str	r7, [r5, #0]
 8001ba8:	e7b1      	b.n	8001b0e <__sflush_r+0x1a>
 8001baa:	89a3      	ldrh	r3, [r4, #12]
 8001bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb0:	81a3      	strh	r3, [r4, #12]
 8001bb2:	e7ad      	b.n	8001b10 <__sflush_r+0x1c>
 8001bb4:	690f      	ldr	r7, [r1, #16]
 8001bb6:	2f00      	cmp	r7, #0
 8001bb8:	d0a9      	beq.n	8001b0e <__sflush_r+0x1a>
 8001bba:	0793      	lsls	r3, r2, #30
 8001bbc:	bf18      	it	ne
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	680e      	ldr	r6, [r1, #0]
 8001bc2:	bf08      	it	eq
 8001bc4:	694b      	ldreq	r3, [r1, #20]
 8001bc6:	eba6 0807 	sub.w	r8, r6, r7
 8001bca:	600f      	str	r7, [r1, #0]
 8001bcc:	608b      	str	r3, [r1, #8]
 8001bce:	f1b8 0f00 	cmp.w	r8, #0
 8001bd2:	dd9c      	ble.n	8001b0e <__sflush_r+0x1a>
 8001bd4:	4643      	mov	r3, r8
 8001bd6:	463a      	mov	r2, r7
 8001bd8:	6a21      	ldr	r1, [r4, #32]
 8001bda:	4628      	mov	r0, r5
 8001bdc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001bde:	47b0      	blx	r6
 8001be0:	2800      	cmp	r0, #0
 8001be2:	dc06      	bgt.n	8001bf2 <__sflush_r+0xfe>
 8001be4:	89a3      	ldrh	r3, [r4, #12]
 8001be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bea:	81a3      	strh	r3, [r4, #12]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	e78e      	b.n	8001b10 <__sflush_r+0x1c>
 8001bf2:	4407      	add	r7, r0
 8001bf4:	eba8 0800 	sub.w	r8, r8, r0
 8001bf8:	e7e9      	b.n	8001bce <__sflush_r+0xda>
 8001bfa:	bf00      	nop
 8001bfc:	20400001 	.word	0x20400001

08001c00 <_fflush_r>:
 8001c00:	b538      	push	{r3, r4, r5, lr}
 8001c02:	690b      	ldr	r3, [r1, #16]
 8001c04:	4605      	mov	r5, r0
 8001c06:	460c      	mov	r4, r1
 8001c08:	b1db      	cbz	r3, 8001c42 <_fflush_r+0x42>
 8001c0a:	b118      	cbz	r0, 8001c14 <_fflush_r+0x14>
 8001c0c:	6983      	ldr	r3, [r0, #24]
 8001c0e:	b90b      	cbnz	r3, 8001c14 <_fflush_r+0x14>
 8001c10:	f000 f860 	bl	8001cd4 <__sinit>
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <_fflush_r+0x48>)
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d109      	bne.n	8001c2e <_fflush_r+0x2e>
 8001c1a:	686c      	ldr	r4, [r5, #4]
 8001c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c20:	b17b      	cbz	r3, 8001c42 <_fflush_r+0x42>
 8001c22:	4621      	mov	r1, r4
 8001c24:	4628      	mov	r0, r5
 8001c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c2a:	f7ff bf63 	b.w	8001af4 <__sflush_r>
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <_fflush_r+0x4c>)
 8001c30:	429c      	cmp	r4, r3
 8001c32:	d101      	bne.n	8001c38 <_fflush_r+0x38>
 8001c34:	68ac      	ldr	r4, [r5, #8]
 8001c36:	e7f1      	b.n	8001c1c <_fflush_r+0x1c>
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <_fflush_r+0x50>)
 8001c3a:	429c      	cmp	r4, r3
 8001c3c:	bf08      	it	eq
 8001c3e:	68ec      	ldreq	r4, [r5, #12]
 8001c40:	e7ec      	b.n	8001c1c <_fflush_r+0x1c>
 8001c42:	2000      	movs	r0, #0
 8001c44:	bd38      	pop	{r3, r4, r5, pc}
 8001c46:	bf00      	nop
 8001c48:	08002208 	.word	0x08002208
 8001c4c:	08002228 	.word	0x08002228
 8001c50:	080021e8 	.word	0x080021e8

08001c54 <std>:
 8001c54:	2300      	movs	r3, #0
 8001c56:	b510      	push	{r4, lr}
 8001c58:	4604      	mov	r4, r0
 8001c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8001c5e:	6083      	str	r3, [r0, #8]
 8001c60:	8181      	strh	r1, [r0, #12]
 8001c62:	6643      	str	r3, [r0, #100]	; 0x64
 8001c64:	81c2      	strh	r2, [r0, #14]
 8001c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c6a:	6183      	str	r3, [r0, #24]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	2208      	movs	r2, #8
 8001c70:	305c      	adds	r0, #92	; 0x5c
 8001c72:	f7ff fe13 	bl	800189c <memset>
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <std+0x38>)
 8001c78:	6224      	str	r4, [r4, #32]
 8001c7a:	6263      	str	r3, [r4, #36]	; 0x24
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <std+0x3c>)
 8001c7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <std+0x40>)
 8001c82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <std+0x44>)
 8001c86:	6323      	str	r3, [r4, #48]	; 0x30
 8001c88:	bd10      	pop	{r4, pc}
 8001c8a:	bf00      	nop
 8001c8c:	0800201d 	.word	0x0800201d
 8001c90:	0800203f 	.word	0x0800203f
 8001c94:	08002077 	.word	0x08002077
 8001c98:	0800209b 	.word	0x0800209b

08001c9c <_cleanup_r>:
 8001c9c:	4901      	ldr	r1, [pc, #4]	; (8001ca4 <_cleanup_r+0x8>)
 8001c9e:	f000 b885 	b.w	8001dac <_fwalk_reent>
 8001ca2:	bf00      	nop
 8001ca4:	08001c01 	.word	0x08001c01

08001ca8 <__sfmoreglue>:
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	2568      	movs	r5, #104	; 0x68
 8001cac:	1e4a      	subs	r2, r1, #1
 8001cae:	4355      	muls	r5, r2
 8001cb0:	460e      	mov	r6, r1
 8001cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001cb6:	f000 f947 	bl	8001f48 <_malloc_r>
 8001cba:	4604      	mov	r4, r0
 8001cbc:	b140      	cbz	r0, 8001cd0 <__sfmoreglue+0x28>
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	e9c0 1600 	strd	r1, r6, [r0]
 8001cc4:	300c      	adds	r0, #12
 8001cc6:	60a0      	str	r0, [r4, #8]
 8001cc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ccc:	f7ff fde6 	bl	800189c <memset>
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	bd70      	pop	{r4, r5, r6, pc}

08001cd4 <__sinit>:
 8001cd4:	6983      	ldr	r3, [r0, #24]
 8001cd6:	b510      	push	{r4, lr}
 8001cd8:	4604      	mov	r4, r0
 8001cda:	bb33      	cbnz	r3, 8001d2a <__sinit+0x56>
 8001cdc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001ce0:	6503      	str	r3, [r0, #80]	; 0x50
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <__sinit+0x58>)
 8001ce4:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <__sinit+0x5c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6282      	str	r2, [r0, #40]	; 0x28
 8001cea:	4298      	cmp	r0, r3
 8001cec:	bf04      	itt	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	6183      	streq	r3, [r0, #24]
 8001cf2:	f000 f81f 	bl	8001d34 <__sfp>
 8001cf6:	6060      	str	r0, [r4, #4]
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f000 f81b 	bl	8001d34 <__sfp>
 8001cfe:	60a0      	str	r0, [r4, #8]
 8001d00:	4620      	mov	r0, r4
 8001d02:	f000 f817 	bl	8001d34 <__sfp>
 8001d06:	2200      	movs	r2, #0
 8001d08:	60e0      	str	r0, [r4, #12]
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	6860      	ldr	r0, [r4, #4]
 8001d0e:	f7ff ffa1 	bl	8001c54 <std>
 8001d12:	2201      	movs	r2, #1
 8001d14:	2109      	movs	r1, #9
 8001d16:	68a0      	ldr	r0, [r4, #8]
 8001d18:	f7ff ff9c 	bl	8001c54 <std>
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	2112      	movs	r1, #18
 8001d20:	68e0      	ldr	r0, [r4, #12]
 8001d22:	f7ff ff97 	bl	8001c54 <std>
 8001d26:	2301      	movs	r3, #1
 8001d28:	61a3      	str	r3, [r4, #24]
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	080021e4 	.word	0x080021e4
 8001d30:	08001c9d 	.word	0x08001c9d

08001d34 <__sfp>:
 8001d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d36:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <__sfp+0x70>)
 8001d38:	4607      	mov	r7, r0
 8001d3a:	681e      	ldr	r6, [r3, #0]
 8001d3c:	69b3      	ldr	r3, [r6, #24]
 8001d3e:	b913      	cbnz	r3, 8001d46 <__sfp+0x12>
 8001d40:	4630      	mov	r0, r6
 8001d42:	f7ff ffc7 	bl	8001cd4 <__sinit>
 8001d46:	3648      	adds	r6, #72	; 0x48
 8001d48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	d503      	bpl.n	8001d58 <__sfp+0x24>
 8001d50:	6833      	ldr	r3, [r6, #0]
 8001d52:	b133      	cbz	r3, 8001d62 <__sfp+0x2e>
 8001d54:	6836      	ldr	r6, [r6, #0]
 8001d56:	e7f7      	b.n	8001d48 <__sfp+0x14>
 8001d58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d5c:	b16d      	cbz	r5, 8001d7a <__sfp+0x46>
 8001d5e:	3468      	adds	r4, #104	; 0x68
 8001d60:	e7f4      	b.n	8001d4c <__sfp+0x18>
 8001d62:	2104      	movs	r1, #4
 8001d64:	4638      	mov	r0, r7
 8001d66:	f7ff ff9f 	bl	8001ca8 <__sfmoreglue>
 8001d6a:	6030      	str	r0, [r6, #0]
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	d1f1      	bne.n	8001d54 <__sfp+0x20>
 8001d70:	230c      	movs	r3, #12
 8001d72:	4604      	mov	r4, r0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4620      	mov	r0, r4
 8001d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <__sfp+0x74>)
 8001d7c:	6665      	str	r5, [r4, #100]	; 0x64
 8001d7e:	e9c4 5500 	strd	r5, r5, [r4]
 8001d82:	60a5      	str	r5, [r4, #8]
 8001d84:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001d88:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	4629      	mov	r1, r5
 8001d90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d94:	f7ff fd82 	bl	800189c <memset>
 8001d98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001da0:	e7e9      	b.n	8001d76 <__sfp+0x42>
 8001da2:	bf00      	nop
 8001da4:	080021e4 	.word	0x080021e4
 8001da8:	ffff0001 	.word	0xffff0001

08001dac <_fwalk_reent>:
 8001dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001db0:	4680      	mov	r8, r0
 8001db2:	4689      	mov	r9, r1
 8001db4:	2600      	movs	r6, #0
 8001db6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001dba:	b914      	cbnz	r4, 8001dc2 <_fwalk_reent+0x16>
 8001dbc:	4630      	mov	r0, r6
 8001dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001dc2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001dc6:	3f01      	subs	r7, #1
 8001dc8:	d501      	bpl.n	8001dce <_fwalk_reent+0x22>
 8001dca:	6824      	ldr	r4, [r4, #0]
 8001dcc:	e7f5      	b.n	8001dba <_fwalk_reent+0xe>
 8001dce:	89ab      	ldrh	r3, [r5, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d907      	bls.n	8001de4 <_fwalk_reent+0x38>
 8001dd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	d003      	beq.n	8001de4 <_fwalk_reent+0x38>
 8001ddc:	4629      	mov	r1, r5
 8001dde:	4640      	mov	r0, r8
 8001de0:	47c8      	blx	r9
 8001de2:	4306      	orrs	r6, r0
 8001de4:	3568      	adds	r5, #104	; 0x68
 8001de6:	e7ee      	b.n	8001dc6 <_fwalk_reent+0x1a>

08001de8 <__swhatbuf_r>:
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	460e      	mov	r6, r1
 8001dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df0:	b096      	sub	sp, #88	; 0x58
 8001df2:	2900      	cmp	r1, #0
 8001df4:	4614      	mov	r4, r2
 8001df6:	461d      	mov	r5, r3
 8001df8:	da07      	bge.n	8001e0a <__swhatbuf_r+0x22>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	602b      	str	r3, [r5, #0]
 8001dfe:	89b3      	ldrh	r3, [r6, #12]
 8001e00:	061a      	lsls	r2, r3, #24
 8001e02:	d410      	bmi.n	8001e26 <__swhatbuf_r+0x3e>
 8001e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e08:	e00e      	b.n	8001e28 <__swhatbuf_r+0x40>
 8001e0a:	466a      	mov	r2, sp
 8001e0c:	f000 f96c 	bl	80020e8 <_fstat_r>
 8001e10:	2800      	cmp	r0, #0
 8001e12:	dbf2      	blt.n	8001dfa <__swhatbuf_r+0x12>
 8001e14:	9a01      	ldr	r2, [sp, #4]
 8001e16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e1e:	425a      	negs	r2, r3
 8001e20:	415a      	adcs	r2, r3
 8001e22:	602a      	str	r2, [r5, #0]
 8001e24:	e7ee      	b.n	8001e04 <__swhatbuf_r+0x1c>
 8001e26:	2340      	movs	r3, #64	; 0x40
 8001e28:	2000      	movs	r0, #0
 8001e2a:	6023      	str	r3, [r4, #0]
 8001e2c:	b016      	add	sp, #88	; 0x58
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}

08001e30 <__smakebuf_r>:
 8001e30:	898b      	ldrh	r3, [r1, #12]
 8001e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e34:	079d      	lsls	r5, r3, #30
 8001e36:	4606      	mov	r6, r0
 8001e38:	460c      	mov	r4, r1
 8001e3a:	d507      	bpl.n	8001e4c <__smakebuf_r+0x1c>
 8001e3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e40:	6023      	str	r3, [r4, #0]
 8001e42:	6123      	str	r3, [r4, #16]
 8001e44:	2301      	movs	r3, #1
 8001e46:	6163      	str	r3, [r4, #20]
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd70      	pop	{r4, r5, r6, pc}
 8001e4c:	ab01      	add	r3, sp, #4
 8001e4e:	466a      	mov	r2, sp
 8001e50:	f7ff ffca 	bl	8001de8 <__swhatbuf_r>
 8001e54:	9900      	ldr	r1, [sp, #0]
 8001e56:	4605      	mov	r5, r0
 8001e58:	4630      	mov	r0, r6
 8001e5a:	f000 f875 	bl	8001f48 <_malloc_r>
 8001e5e:	b948      	cbnz	r0, 8001e74 <__smakebuf_r+0x44>
 8001e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e64:	059a      	lsls	r2, r3, #22
 8001e66:	d4ef      	bmi.n	8001e48 <__smakebuf_r+0x18>
 8001e68:	f023 0303 	bic.w	r3, r3, #3
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	81a3      	strh	r3, [r4, #12]
 8001e72:	e7e3      	b.n	8001e3c <__smakebuf_r+0xc>
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <__smakebuf_r+0x7c>)
 8001e76:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e78:	89a3      	ldrh	r3, [r4, #12]
 8001e7a:	6020      	str	r0, [r4, #0]
 8001e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e80:	81a3      	strh	r3, [r4, #12]
 8001e82:	9b00      	ldr	r3, [sp, #0]
 8001e84:	6120      	str	r0, [r4, #16]
 8001e86:	6163      	str	r3, [r4, #20]
 8001e88:	9b01      	ldr	r3, [sp, #4]
 8001e8a:	b15b      	cbz	r3, 8001ea4 <__smakebuf_r+0x74>
 8001e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e90:	4630      	mov	r0, r6
 8001e92:	f000 f93b 	bl	800210c <_isatty_r>
 8001e96:	b128      	cbz	r0, 8001ea4 <__smakebuf_r+0x74>
 8001e98:	89a3      	ldrh	r3, [r4, #12]
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	81a3      	strh	r3, [r4, #12]
 8001ea4:	89a3      	ldrh	r3, [r4, #12]
 8001ea6:	431d      	orrs	r5, r3
 8001ea8:	81a5      	strh	r5, [r4, #12]
 8001eaa:	e7cd      	b.n	8001e48 <__smakebuf_r+0x18>
 8001eac:	08001c9d 	.word	0x08001c9d

08001eb0 <_free_r>:
 8001eb0:	b538      	push	{r3, r4, r5, lr}
 8001eb2:	4605      	mov	r5, r0
 8001eb4:	2900      	cmp	r1, #0
 8001eb6:	d043      	beq.n	8001f40 <_free_r+0x90>
 8001eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ebc:	1f0c      	subs	r4, r1, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bfb8      	it	lt
 8001ec2:	18e4      	addlt	r4, r4, r3
 8001ec4:	f000 f944 	bl	8002150 <__malloc_lock>
 8001ec8:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <_free_r+0x94>)
 8001eca:	6813      	ldr	r3, [r2, #0]
 8001ecc:	4610      	mov	r0, r2
 8001ece:	b933      	cbnz	r3, 8001ede <_free_r+0x2e>
 8001ed0:	6063      	str	r3, [r4, #4]
 8001ed2:	6014      	str	r4, [r2, #0]
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001eda:	f000 b93a 	b.w	8002152 <__malloc_unlock>
 8001ede:	42a3      	cmp	r3, r4
 8001ee0:	d90b      	bls.n	8001efa <_free_r+0x4a>
 8001ee2:	6821      	ldr	r1, [r4, #0]
 8001ee4:	1862      	adds	r2, r4, r1
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	bf01      	itttt	eq
 8001eea:	681a      	ldreq	r2, [r3, #0]
 8001eec:	685b      	ldreq	r3, [r3, #4]
 8001eee:	1852      	addeq	r2, r2, r1
 8001ef0:	6022      	streq	r2, [r4, #0]
 8001ef2:	6063      	str	r3, [r4, #4]
 8001ef4:	6004      	str	r4, [r0, #0]
 8001ef6:	e7ed      	b.n	8001ed4 <_free_r+0x24>
 8001ef8:	4613      	mov	r3, r2
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	b10a      	cbz	r2, 8001f02 <_free_r+0x52>
 8001efe:	42a2      	cmp	r2, r4
 8001f00:	d9fa      	bls.n	8001ef8 <_free_r+0x48>
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	1858      	adds	r0, r3, r1
 8001f06:	42a0      	cmp	r0, r4
 8001f08:	d10b      	bne.n	8001f22 <_free_r+0x72>
 8001f0a:	6820      	ldr	r0, [r4, #0]
 8001f0c:	4401      	add	r1, r0
 8001f0e:	1858      	adds	r0, r3, r1
 8001f10:	4282      	cmp	r2, r0
 8001f12:	6019      	str	r1, [r3, #0]
 8001f14:	d1de      	bne.n	8001ed4 <_free_r+0x24>
 8001f16:	6810      	ldr	r0, [r2, #0]
 8001f18:	6852      	ldr	r2, [r2, #4]
 8001f1a:	4401      	add	r1, r0
 8001f1c:	6019      	str	r1, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	e7d8      	b.n	8001ed4 <_free_r+0x24>
 8001f22:	d902      	bls.n	8001f2a <_free_r+0x7a>
 8001f24:	230c      	movs	r3, #12
 8001f26:	602b      	str	r3, [r5, #0]
 8001f28:	e7d4      	b.n	8001ed4 <_free_r+0x24>
 8001f2a:	6820      	ldr	r0, [r4, #0]
 8001f2c:	1821      	adds	r1, r4, r0
 8001f2e:	428a      	cmp	r2, r1
 8001f30:	bf01      	itttt	eq
 8001f32:	6811      	ldreq	r1, [r2, #0]
 8001f34:	6852      	ldreq	r2, [r2, #4]
 8001f36:	1809      	addeq	r1, r1, r0
 8001f38:	6021      	streq	r1, [r4, #0]
 8001f3a:	6062      	str	r2, [r4, #4]
 8001f3c:	605c      	str	r4, [r3, #4]
 8001f3e:	e7c9      	b.n	8001ed4 <_free_r+0x24>
 8001f40:	bd38      	pop	{r3, r4, r5, pc}
 8001f42:	bf00      	nop
 8001f44:	20000090 	.word	0x20000090

08001f48 <_malloc_r>:
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	1ccd      	adds	r5, r1, #3
 8001f4c:	f025 0503 	bic.w	r5, r5, #3
 8001f50:	3508      	adds	r5, #8
 8001f52:	2d0c      	cmp	r5, #12
 8001f54:	bf38      	it	cc
 8001f56:	250c      	movcc	r5, #12
 8001f58:	2d00      	cmp	r5, #0
 8001f5a:	4606      	mov	r6, r0
 8001f5c:	db01      	blt.n	8001f62 <_malloc_r+0x1a>
 8001f5e:	42a9      	cmp	r1, r5
 8001f60:	d903      	bls.n	8001f6a <_malloc_r+0x22>
 8001f62:	230c      	movs	r3, #12
 8001f64:	6033      	str	r3, [r6, #0]
 8001f66:	2000      	movs	r0, #0
 8001f68:	bd70      	pop	{r4, r5, r6, pc}
 8001f6a:	f000 f8f1 	bl	8002150 <__malloc_lock>
 8001f6e:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <_malloc_r+0xac>)
 8001f70:	6814      	ldr	r4, [r2, #0]
 8001f72:	4621      	mov	r1, r4
 8001f74:	b991      	cbnz	r1, 8001f9c <_malloc_r+0x54>
 8001f76:	4c20      	ldr	r4, [pc, #128]	; (8001ff8 <_malloc_r+0xb0>)
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	b91b      	cbnz	r3, 8001f84 <_malloc_r+0x3c>
 8001f7c:	4630      	mov	r0, r6
 8001f7e:	f000 f83d 	bl	8001ffc <_sbrk_r>
 8001f82:	6020      	str	r0, [r4, #0]
 8001f84:	4629      	mov	r1, r5
 8001f86:	4630      	mov	r0, r6
 8001f88:	f000 f838 	bl	8001ffc <_sbrk_r>
 8001f8c:	1c43      	adds	r3, r0, #1
 8001f8e:	d124      	bne.n	8001fda <_malloc_r+0x92>
 8001f90:	230c      	movs	r3, #12
 8001f92:	4630      	mov	r0, r6
 8001f94:	6033      	str	r3, [r6, #0]
 8001f96:	f000 f8dc 	bl	8002152 <__malloc_unlock>
 8001f9a:	e7e4      	b.n	8001f66 <_malloc_r+0x1e>
 8001f9c:	680b      	ldr	r3, [r1, #0]
 8001f9e:	1b5b      	subs	r3, r3, r5
 8001fa0:	d418      	bmi.n	8001fd4 <_malloc_r+0x8c>
 8001fa2:	2b0b      	cmp	r3, #11
 8001fa4:	d90f      	bls.n	8001fc6 <_malloc_r+0x7e>
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	18cc      	adds	r4, r1, r3
 8001faa:	50cd      	str	r5, [r1, r3]
 8001fac:	4630      	mov	r0, r6
 8001fae:	f000 f8d0 	bl	8002152 <__malloc_unlock>
 8001fb2:	f104 000b 	add.w	r0, r4, #11
 8001fb6:	1d23      	adds	r3, r4, #4
 8001fb8:	f020 0007 	bic.w	r0, r0, #7
 8001fbc:	1ac3      	subs	r3, r0, r3
 8001fbe:	d0d3      	beq.n	8001f68 <_malloc_r+0x20>
 8001fc0:	425a      	negs	r2, r3
 8001fc2:	50e2      	str	r2, [r4, r3]
 8001fc4:	e7d0      	b.n	8001f68 <_malloc_r+0x20>
 8001fc6:	684b      	ldr	r3, [r1, #4]
 8001fc8:	428c      	cmp	r4, r1
 8001fca:	bf16      	itet	ne
 8001fcc:	6063      	strne	r3, [r4, #4]
 8001fce:	6013      	streq	r3, [r2, #0]
 8001fd0:	460c      	movne	r4, r1
 8001fd2:	e7eb      	b.n	8001fac <_malloc_r+0x64>
 8001fd4:	460c      	mov	r4, r1
 8001fd6:	6849      	ldr	r1, [r1, #4]
 8001fd8:	e7cc      	b.n	8001f74 <_malloc_r+0x2c>
 8001fda:	1cc4      	adds	r4, r0, #3
 8001fdc:	f024 0403 	bic.w	r4, r4, #3
 8001fe0:	42a0      	cmp	r0, r4
 8001fe2:	d005      	beq.n	8001ff0 <_malloc_r+0xa8>
 8001fe4:	1a21      	subs	r1, r4, r0
 8001fe6:	4630      	mov	r0, r6
 8001fe8:	f000 f808 	bl	8001ffc <_sbrk_r>
 8001fec:	3001      	adds	r0, #1
 8001fee:	d0cf      	beq.n	8001f90 <_malloc_r+0x48>
 8001ff0:	6025      	str	r5, [r4, #0]
 8001ff2:	e7db      	b.n	8001fac <_malloc_r+0x64>
 8001ff4:	20000090 	.word	0x20000090
 8001ff8:	20000094 	.word	0x20000094

08001ffc <_sbrk_r>:
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	2300      	movs	r3, #0
 8002000:	4c05      	ldr	r4, [pc, #20]	; (8002018 <_sbrk_r+0x1c>)
 8002002:	4605      	mov	r5, r0
 8002004:	4608      	mov	r0, r1
 8002006:	6023      	str	r3, [r4, #0]
 8002008:	f7fe fac2 	bl	8000590 <_sbrk>
 800200c:	1c43      	adds	r3, r0, #1
 800200e:	d102      	bne.n	8002016 <_sbrk_r+0x1a>
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	b103      	cbz	r3, 8002016 <_sbrk_r+0x1a>
 8002014:	602b      	str	r3, [r5, #0]
 8002016:	bd38      	pop	{r3, r4, r5, pc}
 8002018:	200000e0 	.word	0x200000e0

0800201c <__sread>:
 800201c:	b510      	push	{r4, lr}
 800201e:	460c      	mov	r4, r1
 8002020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002024:	f000 f896 	bl	8002154 <_read_r>
 8002028:	2800      	cmp	r0, #0
 800202a:	bfab      	itete	ge
 800202c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800202e:	89a3      	ldrhlt	r3, [r4, #12]
 8002030:	181b      	addge	r3, r3, r0
 8002032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002036:	bfac      	ite	ge
 8002038:	6563      	strge	r3, [r4, #84]	; 0x54
 800203a:	81a3      	strhlt	r3, [r4, #12]
 800203c:	bd10      	pop	{r4, pc}

0800203e <__swrite>:
 800203e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002042:	461f      	mov	r7, r3
 8002044:	898b      	ldrh	r3, [r1, #12]
 8002046:	4605      	mov	r5, r0
 8002048:	05db      	lsls	r3, r3, #23
 800204a:	460c      	mov	r4, r1
 800204c:	4616      	mov	r6, r2
 800204e:	d505      	bpl.n	800205c <__swrite+0x1e>
 8002050:	2302      	movs	r3, #2
 8002052:	2200      	movs	r2, #0
 8002054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002058:	f000 f868 	bl	800212c <_lseek_r>
 800205c:	89a3      	ldrh	r3, [r4, #12]
 800205e:	4632      	mov	r2, r6
 8002060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002064:	81a3      	strh	r3, [r4, #12]
 8002066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800206a:	463b      	mov	r3, r7
 800206c:	4628      	mov	r0, r5
 800206e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002072:	f000 b817 	b.w	80020a4 <_write_r>

08002076 <__sseek>:
 8002076:	b510      	push	{r4, lr}
 8002078:	460c      	mov	r4, r1
 800207a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800207e:	f000 f855 	bl	800212c <_lseek_r>
 8002082:	1c43      	adds	r3, r0, #1
 8002084:	89a3      	ldrh	r3, [r4, #12]
 8002086:	bf15      	itete	ne
 8002088:	6560      	strne	r0, [r4, #84]	; 0x54
 800208a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800208e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002092:	81a3      	strheq	r3, [r4, #12]
 8002094:	bf18      	it	ne
 8002096:	81a3      	strhne	r3, [r4, #12]
 8002098:	bd10      	pop	{r4, pc}

0800209a <__sclose>:
 800209a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800209e:	f000 b813 	b.w	80020c8 <_close_r>
	...

080020a4 <_write_r>:
 80020a4:	b538      	push	{r3, r4, r5, lr}
 80020a6:	4605      	mov	r5, r0
 80020a8:	4608      	mov	r0, r1
 80020aa:	4611      	mov	r1, r2
 80020ac:	2200      	movs	r2, #0
 80020ae:	4c05      	ldr	r4, [pc, #20]	; (80020c4 <_write_r+0x20>)
 80020b0:	6022      	str	r2, [r4, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	f7fe fa20 	bl	80004f8 <_write>
 80020b8:	1c43      	adds	r3, r0, #1
 80020ba:	d102      	bne.n	80020c2 <_write_r+0x1e>
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	b103      	cbz	r3, 80020c2 <_write_r+0x1e>
 80020c0:	602b      	str	r3, [r5, #0]
 80020c2:	bd38      	pop	{r3, r4, r5, pc}
 80020c4:	200000e0 	.word	0x200000e0

080020c8 <_close_r>:
 80020c8:	b538      	push	{r3, r4, r5, lr}
 80020ca:	2300      	movs	r3, #0
 80020cc:	4c05      	ldr	r4, [pc, #20]	; (80020e4 <_close_r+0x1c>)
 80020ce:	4605      	mov	r5, r0
 80020d0:	4608      	mov	r0, r1
 80020d2:	6023      	str	r3, [r4, #0]
 80020d4:	f7fe fa2c 	bl	8000530 <_close>
 80020d8:	1c43      	adds	r3, r0, #1
 80020da:	d102      	bne.n	80020e2 <_close_r+0x1a>
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	b103      	cbz	r3, 80020e2 <_close_r+0x1a>
 80020e0:	602b      	str	r3, [r5, #0]
 80020e2:	bd38      	pop	{r3, r4, r5, pc}
 80020e4:	200000e0 	.word	0x200000e0

080020e8 <_fstat_r>:
 80020e8:	b538      	push	{r3, r4, r5, lr}
 80020ea:	2300      	movs	r3, #0
 80020ec:	4c06      	ldr	r4, [pc, #24]	; (8002108 <_fstat_r+0x20>)
 80020ee:	4605      	mov	r5, r0
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	6023      	str	r3, [r4, #0]
 80020f6:	f7fe fa26 	bl	8000546 <_fstat>
 80020fa:	1c43      	adds	r3, r0, #1
 80020fc:	d102      	bne.n	8002104 <_fstat_r+0x1c>
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	b103      	cbz	r3, 8002104 <_fstat_r+0x1c>
 8002102:	602b      	str	r3, [r5, #0]
 8002104:	bd38      	pop	{r3, r4, r5, pc}
 8002106:	bf00      	nop
 8002108:	200000e0 	.word	0x200000e0

0800210c <_isatty_r>:
 800210c:	b538      	push	{r3, r4, r5, lr}
 800210e:	2300      	movs	r3, #0
 8002110:	4c05      	ldr	r4, [pc, #20]	; (8002128 <_isatty_r+0x1c>)
 8002112:	4605      	mov	r5, r0
 8002114:	4608      	mov	r0, r1
 8002116:	6023      	str	r3, [r4, #0]
 8002118:	f7fe fa24 	bl	8000564 <_isatty>
 800211c:	1c43      	adds	r3, r0, #1
 800211e:	d102      	bne.n	8002126 <_isatty_r+0x1a>
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	b103      	cbz	r3, 8002126 <_isatty_r+0x1a>
 8002124:	602b      	str	r3, [r5, #0]
 8002126:	bd38      	pop	{r3, r4, r5, pc}
 8002128:	200000e0 	.word	0x200000e0

0800212c <_lseek_r>:
 800212c:	b538      	push	{r3, r4, r5, lr}
 800212e:	4605      	mov	r5, r0
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	2200      	movs	r2, #0
 8002136:	4c05      	ldr	r4, [pc, #20]	; (800214c <_lseek_r+0x20>)
 8002138:	6022      	str	r2, [r4, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	f7fe fa1c 	bl	8000578 <_lseek>
 8002140:	1c43      	adds	r3, r0, #1
 8002142:	d102      	bne.n	800214a <_lseek_r+0x1e>
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	b103      	cbz	r3, 800214a <_lseek_r+0x1e>
 8002148:	602b      	str	r3, [r5, #0]
 800214a:	bd38      	pop	{r3, r4, r5, pc}
 800214c:	200000e0 	.word	0x200000e0

08002150 <__malloc_lock>:
 8002150:	4770      	bx	lr

08002152 <__malloc_unlock>:
 8002152:	4770      	bx	lr

08002154 <_read_r>:
 8002154:	b538      	push	{r3, r4, r5, lr}
 8002156:	4605      	mov	r5, r0
 8002158:	4608      	mov	r0, r1
 800215a:	4611      	mov	r1, r2
 800215c:	2200      	movs	r2, #0
 800215e:	4c05      	ldr	r4, [pc, #20]	; (8002174 <_read_r+0x20>)
 8002160:	6022      	str	r2, [r4, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	f7fe f9ab 	bl	80004be <_read>
 8002168:	1c43      	adds	r3, r0, #1
 800216a:	d102      	bne.n	8002172 <_read_r+0x1e>
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	b103      	cbz	r3, 8002172 <_read_r+0x1e>
 8002170:	602b      	str	r3, [r5, #0]
 8002172:	bd38      	pop	{r3, r4, r5, pc}
 8002174:	200000e0 	.word	0x200000e0

08002178 <_init>:
 8002178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217a:	bf00      	nop
 800217c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800217e:	bc08      	pop	{r3}
 8002180:	469e      	mov	lr, r3
 8002182:	4770      	bx	lr

08002184 <_fini>:
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002186:	bf00      	nop
 8002188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218a:	bc08      	pop	{r3}
 800218c:	469e      	mov	lr, r3
 800218e:	4770      	bx	lr
